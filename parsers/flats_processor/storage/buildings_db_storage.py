import psycopg2
from psycopg2 import sql

def save_buildings_to_postgresql(buildings, db_params):
    """Сохраняет данные здания в PostgreSQL."""
    try:
        conn = psycopg2.connect(**db_params)
        cursor = conn.cursor()

        # create_table_query = """
        #             CREATE TABLE IF NOT EXISTS "Buildings" (
        #                 "BuildingId" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        #                 "DeveloperId" INTEGER NOT NULL,
        #                 "ConstructionStatus" TEXT NOT NULL,
        #                 "FloorCount" INTEGER NOT NULL,
        #                 "Address" TEXT NOT NULL,
        #                 "InfrastructureInfoId" INTEGER,
        #                 "Latitude" DOUBLE PRECISION NOT NULL,
        #                 "Longitude" DOUBLE PRECISION NOT NULL,
        #                 "ResidentialComplex" TEXT
        #             )
        #         """
        #
        # cursor.execute(create_table_query)
        #
        # cursor.execute('TRUNCATE TABLE public."Buildings" RESTART IDENTITY CASCADE')

        insert_query = sql.SQL("""
                INSERT INTO "Buildings" ("DeveloperId", "ConstructionStatus", "FloorCount", "Address", "Latitude", "Longitude", "ResidentialComplex")
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                """)

        for building in buildings:
            cursor.execute(insert_query, (
                building['developer_id'],
                building['status'],
                building['floors_count'],
                building['address'],
                building['lat'],
                building['lon'],
                building['residential_complex']
            ))

        conn.commit()
        print(f"Успешно сохранено {len(buildings)} зданий в БД PostgreSQL")
        return True

    except Exception as e:
        print(f"Ошибка при сохранении в PostgreSQL: {e}")
        return False
    finally:
        if conn:
            conn.close()


def find_developer_id(developer_name: str, db_params) -> int:
    """Ищет ID застройщика по названию в базе данных."""

    query = sql.SQL("""
        SELECT "DeveloperId" 
        FROM "Developers" 
        WHERE "Name" LIKE %s
        LIMIT 1
    """)

    try:
        with psycopg2.connect(**db_params) as conn:
            with conn.cursor() as cursor:
                cursor.execute(query, (f"%{developer_name}%",))
                result = cursor.fetchone()
                return result[0] if result else None

    except psycopg2.Error as e:
        print(f"Ошибка при поиске застройщика: {e}")
        raise

