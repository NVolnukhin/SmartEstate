// <auto-generated />
using System;
using DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseContext.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404180543_InfrastructureInfoUpdate")]
    partial class InfrastructureInfoUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseModel.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConstructionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("integer");

                    b.Property<int>("FloorCount")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("BuildingId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("DatabaseModel.Developer", b =>
                {
                    b.Property<int>("DeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeveloperId"));

                    b.Property<string>("BuildingsCount")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("DeveloperId");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("DatabaseModel.Flat", b =>
                {
                    b.Property<int>("FlatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FlatId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("CianLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinishType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<int>("Roominess")
                        .HasColumnType("integer");

                    b.Property<decimal>("Square")
                        .HasColumnType("numeric");

                    b.HasKey("FlatId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Flats");
                });

            modelBuilder.Entity("DatabaseModel.InfrastructureInfo", b =>
                {
                    b.Property<int>("InfrastructureInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InfrastructureInfoId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<string>("Facilities")
                        .HasColumnType("text");

                    b.Property<int?>("MinutesToKindergarten")
                        .HasColumnType("integer");

                    b.Property<int?>("MinutesToMetro")
                        .HasColumnType("integer");

                    b.Property<int?>("MinutesToPharmacy")
                        .HasColumnType("integer");

                    b.Property<int?>("MinutesToSchool")
                        .HasColumnType("integer");

                    b.Property<int?>("MinutesToShop")
                        .HasColumnType("integer");

                    b.Property<int?>("NearestKindergartenId")
                        .HasColumnType("integer");

                    b.Property<int?>("NearestMetroId")
                        .HasColumnType("integer");

                    b.Property<int?>("NearestPharmacyId")
                        .HasColumnType("integer");

                    b.Property<int?>("NearestSchoolId")
                        .HasColumnType("integer");

                    b.Property<int?>("NearestShopId")
                        .HasColumnType("integer");

                    b.HasKey("InfrastructureInfoId");

                    b.HasIndex("BuildingId")
                        .IsUnique();

                    b.HasIndex("NearestKindergartenId");

                    b.HasIndex("NearestMetroId");

                    b.HasIndex("NearestPharmacyId");

                    b.HasIndex("NearestSchoolId");

                    b.HasIndex("NearestShopId");

                    b.ToTable("InfrastructureInfos");
                });

            modelBuilder.Entity("DatabaseModel.Infrastucture.Kindergarten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Kindergarten");
                });

            modelBuilder.Entity("DatabaseModel.Infrastucture.Metro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Metro");
                });

            modelBuilder.Entity("DatabaseModel.Infrastucture.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("DatabaseModel.Infrastucture.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("School");
                });

            modelBuilder.Entity("DatabaseModel.Infrastucture.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("DatabaseModel.PriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PriceHistoryId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlatId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("FlatId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("DatabaseModel.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseModel.UserComparison", b =>
                {
                    b.Property<int>("CompareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompareId"));

                    b.Property<int>("FlatId1")
                        .HasColumnType("integer");

                    b.Property<int>("FlatId2")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CompareId");

                    b.HasIndex("FlatId1");

                    b.HasIndex("FlatId2");

                    b.HasIndex("UserId");

                    b.ToTable("UserComparisons");
                });

            modelBuilder.Entity("DatabaseModel.UserFavorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("FlatId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteId");

                    b.HasIndex("FlatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("DatabaseModel.Building", b =>
                {
                    b.HasOne("DatabaseModel.Developer", "Developer")
                        .WithMany("Buildings")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("DatabaseModel.Flat", b =>
                {
                    b.HasOne("DatabaseModel.Building", "Building")
                        .WithMany("Flats")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("DatabaseModel.InfrastructureInfo", b =>
                {
                    b.HasOne("DatabaseModel.Building", "Building")
                        .WithOne()
                        .HasForeignKey("DatabaseModel.InfrastructureInfo", "BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseModel.Infrastucture.Kindergarten", "NearestKindergarten")
                        .WithMany()
                        .HasForeignKey("NearestKindergartenId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DatabaseModel.Infrastucture.Metro", "NearestMetro")
                        .WithMany()
                        .HasForeignKey("NearestMetroId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DatabaseModel.Infrastucture.Pharmacy", "NearestPharmacy")
                        .WithMany()
                        .HasForeignKey("NearestPharmacyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DatabaseModel.Infrastucture.School", "NearestSchool")
                        .WithMany()
                        .HasForeignKey("NearestSchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DatabaseModel.Infrastucture.Shop", "NearestShop")
                        .WithMany()
                        .HasForeignKey("NearestShopId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Building");

                    b.Navigation("NearestKindergarten");

                    b.Navigation("NearestMetro");

                    b.Navigation("NearestPharmacy");

                    b.Navigation("NearestSchool");

                    b.Navigation("NearestShop");
                });

            modelBuilder.Entity("DatabaseModel.PriceHistory", b =>
                {
                    b.HasOne("DatabaseModel.Flat", "Flat")
                        .WithMany("PriceHistories")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");
                });

            modelBuilder.Entity("DatabaseModel.UserComparison", b =>
                {
                    b.HasOne("DatabaseModel.Flat", "FirstFlat")
                        .WithMany("ComparisonsAsFirst")
                        .HasForeignKey("FlatId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseModel.Flat", "SecondFlat")
                        .WithMany("ComparisonsAsSecond")
                        .HasForeignKey("FlatId2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseModel.User", "User")
                        .WithMany("Comparisons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstFlat");

                    b.Navigation("SecondFlat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseModel.UserFavorite", b =>
                {
                    b.HasOne("DatabaseModel.Flat", "Flat")
                        .WithMany("Favorites")
                        .HasForeignKey("FlatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseModel.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseModel.Building", b =>
                {
                    b.Navigation("Flats");
                });

            modelBuilder.Entity("DatabaseModel.Developer", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("DatabaseModel.Flat", b =>
                {
                    b.Navigation("ComparisonsAsFirst");

                    b.Navigation("ComparisonsAsSecond");

                    b.Navigation("Favorites");

                    b.Navigation("PriceHistories");
                });

            modelBuilder.Entity("DatabaseModel.User", b =>
                {
                    b.Navigation("Comparisons");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
